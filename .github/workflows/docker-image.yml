name: Docker Image CI

on:
  push:
    branches: [ master ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Login DockerHub
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        username: ${{ secrets.MARIANA_DOCKERHUB_USERNAME }}
        password: ${{ secrets.MARIANA_DOCKERHUB_PASSWORD }}
    
    - name: Build reverse_proxy image
      run:  docker build reverse_proxy/ -t ${{ secrets.MARIANA_DOCKERHUB_USERNAME }}/reverse-proxy:latest -t ${{ secrets.MARIANA_DOCKERHUB_USERNAME }}/reverse-proxy:${{ github.sha }} 
      
    - name: Push reverse_proxy image
      run: docker push --all-tags ${{ secrets.MARIANA_DOCKERHUB_USERNAME }}/reverse-proxy 

    - name: Build database image
      run:  docker build database/ -t ${{ secrets.MARIANA_DOCKERHUB_USERNAME }}/database:latest -t ${{ secrets.MARIANA_DOCKERHUB_USERNAME }}/database:${{ github.sha }} 
      
    - name: Push database image
      run: docker push --all-tags ${{ secrets.MARIANA_DOCKERHUB_USERNAME }}/database

    - name: Build payment_gateway image
      run:  docker build payment_gateway/ -t ${{ secrets.MARIANA_DOCKERHUB_USERNAME }}/payment_gateway:latest -t ${{ secrets.MARIANA_DOCKERHUB_USERNAME }}/payment_gateway:${{ github.sha }} 
      
    - name: Push payment gateway image
      run: docker push --all-tags ${{ secrets.MARIANA_DOCKERHUB_USERNAME }}/payment_gateway

    - name: Build app image
      run: docker build app/ -t ${{ secrets.MARIANA_DOCKERHUB_USERNAME }}/app:latest -t ${{ secrets.MARIANA_DOCKERHUB_USERNAME }}/app:${{ github.sha }}

    - name: push app image
      run : docker push --all-tags ${{ secrets.MARIANA_DOCKERHUB_USERNAME }}/app

      
  deploy:

     runs-on: ubuntu-latest
     steps:

     - name: Checkout
       uses: actions/checkout@v2

     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@b8c74de753fbcb4868bf2011fb2e15826ce973af
       with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

     - name: Check if the EC2 instace stopped
       run: state=`(aws ec2 describe-instance-status --instance-id ${{ secrets.PYC_INSTANCE_ID }}) | grep -w "running" | wc -l`;
          if [ "$state" -eq 0 ]; then aws ec2 start-instances --instance-ids ${{ secrets.PYC_INSTANCE_ID }}; fi
     
        
